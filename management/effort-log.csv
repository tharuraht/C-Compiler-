Date,Effort,Developers,Description, Milestones (ID),Total effort,Reflection
18.02.19,1,am9717 ta2617,Read specification; understand tasks required, Define_initial_milestones,2,"This was the intial discussion involved in the project, hence it took the expected time"
22.02.19,1,am9717 ta2617,Understood C89 draft spec; allocated initial tasks, Define_initial_milestones,,
25.02.19,3,am9717,Worked on a simple lexer based on C89 draft manual, Create_simple_lexer,,
27.02.19,2,ta2617, Ran tests on lexer based on test_lexer.sh from lexer lab 1, Test_simple_lexer,3,"The estimation was pessimitic. Testing took a bit longer than expected, as some errors occurred (in lexing) which took a while as we had to figure out an effective debugging method."
01.03.19,1, am9717 ta2617, Discussed findings from lexer testing and approach for the parse tree, Test_simple_lexer,,
04.03.19,3,am9717,Worked on simple parser based on C89 default spec and watched parser lecture, Create_simple_parser,7,"Optimistic. We were originally planning to use the public parser online, but after failing to understand it we decided to implement our own parse tree. This involved a lot of time figuring out the most effective parsing order. As this is early on, future milestones aren't too badly affected as of yet."
05.03.19,4,ta2617,Began generating main parse tree after realising being short of time for the project,Develop_simple_parser,,
06.03.19,7,am9717 ta2617,Built more of parse tree and began writing AST functions,Develop_simple_parser,11,"Very optimistic. In building the tree, we encountered a few dififcult bugs such as shift-reduce and reduce-reduce errors. We need to allow more time for this in the future."
09.03.19,3,ta2617,Reduced and simplified parser tree in order to test and create functional AST,"Complete_simple_parser, Test_simple_parser",3,Pessimistic. This is likely due to us testing as we wen't which meant not as many errors were encountered.
10.03.19,3, am9717,Completed ten required tests for deliverable 1; wrote (yet to test) bash script to automate testing," Complete_Deliverable_1, Test_Deliverable_1",3,"Pessimistic. As before, due to testing whilst developing. Extra time was to allow for debugging."
11.03.19,3,ta2617,Broadened parser to allow for simple variable syntax e.g. 'a=5+5;',Create_var_declaration,3,"Slightly optimistic. This took slightly longer than expect, as the parse tree had issues. In future allow time for parser tree adjustments as it is the backbone of the project. "
11.03.19,2, am9717,Syntax errors in flex file which were resolved by simplifying parse tree, Test_simple_parser,2,"Optimistic. Due to unexpected errors in the parse tree, extra tests were made"
12.03.19,3,ta2617,Implemented function definition; main specific translation for the translator deliverable, Implement_function_def,3,As expected.
13.03.19,5,ta2617,Fixed bugs with multiple statements; resolved some shift-reduce conflicts implemented global variables, Implement_multifunction_def,5,"Optimistic. Took longer due to resolving some shift reduce errors, but also had to implement a feature that should've been part of an earlier milestone. "
13.03.19,5,am9717, Added translator functionality for: ifelse statements and operators. Implemented c_compiler.cpp for translator testbench testing, Implement_loops_def,,
14.04.19,3,ta2617, Fixed bugs with translator; added some tests for translator, Test_python_translator,3,Optimistic. Tests created passed for simple parse tree we currently have. We can allow some extra time for future milestones
14.03.19,4,am9717,Added more comparator and logical operator translator functionality; improved commment support and added more translator tests, Implement_operators,,
15.03.19,5,ta2617,Fixed binary operators || and && in parse tree; added more tests such as nested if; fixed expressions in function calls, Test_python_translator,5,"Very optimistic. This was due to many unexpected errors, but also due to missing features like function calls. Having better defined milestones would help with this."
15.03.19,1,ta2617,Allowed for non-assigned expressions; added associatiity to ops, Implement_operators,1,As expected. Operators were added earlier than planned due to their simplicity and availability of time.
15.03.19,6,am9717,Improved translator function for operators; built more parse tree to support returning function calls and debugged errors in translator, Complete_python_translator,,
16.03.19,4,ta2617,Implemented bracketed expressions for translate; created context class for compiler, Write_c_context,4,As expected.
16.03.19,8,am9717, Reduced shift/conflict errors in parse tree; implemented do-while and for loops; increments/decrements and empty function calls for translator, Complete_python_translator,,
17.03.19,5,am9717 ta2617,Discussed codegen structure based on lab 3 and started codegen for global variables, Understand_MIPS_directives,5,"Optimistic. Directives were hard to understand, as very little information is available on them. Discussed with other groups as well to try to understand the concepts, and watched lectures for help on codegen, as well as labs."
18.03.19,2,ta2617,Implemented type definition and assignment of multiple variables, Create_Simple_Compile_Function,,
19.03.19,2,ta2617,Fixed implementation of multiple decs - was understood wrong before, Create_Simple_Compile_Function,4,As expected. May need to save time for future unseen delays.
19.03.19,6,am9717,Worked on codegen for scope statements and variable declaration; managed to print asm for simple main function, Implement_statement_scope,,
20.03.19,10,ta2617,Added new parameter for compile function; implemented return; function declaractions and simple expressions; created simple compiler testers; implementing global variables into functions, Implement_global_var/dec,10,"Optimistic. Many other features needed to work in order for these implementations to work properly, may need to avoid more advanced features and focus on the more basic ones.= first."
20.03.19,2,ta2617,Implemented while function compiliation and comparison expressions, Implement_loops,2,"Pessimistic. Loops were relatively easier than expected, and similar to CompArch last year. "
20.03.19,3, am9717, Discussed and adapted current codegen structure with MIPS ABI calls; nearly completed codegen for IfElse statements, Implement_loops,,
21.03.19,2,am9717 ta2617,Fixed reduce-reduce in parser and implemented function calls in expressions, Complete_Basic_Codegen,2,Pessimistic. This was a major milstone so we allowed a lot of time to fix any errors and miss out features from planning. However we did these as we went along so not much time was needed for the final checks. 
21.03.19,6, am9717, Resolved errors in translator testbench; updated FOR_N test and ran testbench on present compiler. Implemented codegen for FOR loops., Test_Basic_Codegen,2,As expected. Reserve extra time from previous milestone for unexpected changes.
22.03.19,9,am9717 ta2617,Implemented parameters; fixed testbench and recursive function call, Implement_param_function_calls,,
23.03.19,7,ta2617,Implemented local and global arrays and access via square brackets and defined default return to 0, Implement_local/global_arrays,7,Optimistic. Had to rewrite implemetations of global variables to allow this to work. 
23.03.19,2,am9717, Implemented codegen for BREAK function; read up on how to implement MIPS for continue and switch statements, Implement_continue/break,,
24.03.19,5,ta2617,Implemented parsing and compilation of enum keyword and changed some compiler tests," Implement_continue/break,  Implement_enum",5,As expected.
24.03.19,8,am9717, Fixed incorrectly implemented BREAK; completed CONTINUE and working on SWITCH with ta2617. Completed parser + codegen for operator assignments., Implement_operators,,
25.03.19,11,am9717 ta2617, Worked together to fix issues with function calls; changed parse tree structure to match operator precedence; added classes for relevant operators and performed functional testing using testbench., Complete_intermediate_codegen,,
26.03.19,12,am9717 ta2617,Added hex and exponential numbers and underscore - fixed: corner cases; enum; break/continue; for loops; while loops; ifelse loops; added more tests and tested using testbench., Complete_intermediate_codegen,,
